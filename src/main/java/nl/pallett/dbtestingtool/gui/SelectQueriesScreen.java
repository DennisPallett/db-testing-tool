/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package nl.pallett.dbtestingtool.gui;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.text.NumberFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Iterator;
import java.util.Locale;
import java.util.PriorityQueue;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import nl.pallett.dbtestingtool.TestSet;
import nl.pallett.dbtestingtool.TestRunner;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NamedNodeMap;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;

/**
 *
 * @author Dennis
 */
public class SelectQueriesScreen extends javax.swing.JFrame {
    protected TestRunner testRunner;
    
    protected ArrayList<TestSet> testSetList;
    
    protected DocumentBuilderFactory dbf;
    
    /**
     * Creates new form SelectQueriesScreen
     */
    public SelectQueriesScreen(TestRunner testRunner) {
        initComponents();
        
        setLocationRelativeTo(null); 
        
        this.testRunner = testRunner;
        
        Comparator<TestSet> comparator = new TestSetComparator();
        testSetList = new ArrayList();
        
        // instance of a DocumentBuilderFactory
        dbf = DocumentBuilderFactory.newInstance();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblTestSets = new javax.swing.JTable();
        btnLoadSet = new javax.swing.JButton();
        btnAddQueries = new javax.swing.JButton();
        btnRemove = new javax.swing.JButton();
        btnNext = new javax.swing.JButton();
        btnSaveSet = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Select test queries - Database Testing Tool");

        tblTestSets.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Source", "Name", "Size"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblTestSets.setColumnSelectionAllowed(true);
        tblTestSets.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblTestSets.getSelectionModel().addListSelectionListener(new TableListener());
        jScrollPane1.setViewportView(tblTestSets);
        tblTestSets.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblTestSets.getColumnModel().getColumn(0).setResizable(false);
        tblTestSets.getColumnModel().getColumn(0).setPreferredWidth(100);
        tblTestSets.getColumnModel().getColumn(1).setResizable(false);
        tblTestSets.getColumnModel().getColumn(2).setResizable(false);
        tblTestSets.getColumnModel().getColumn(2).setPreferredWidth(50);

        btnLoadSet.setText("Load existing test profile");
        btnLoadSet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoadSetActionPerformed(evt);
            }
        });

        btnAddQueries.setText("Add test set");
        btnAddQueries.setMaximumSize(new java.awt.Dimension(135, 23));
        btnAddQueries.setMinimumSize(new java.awt.Dimension(135, 23));
        btnAddQueries.setPreferredSize(new java.awt.Dimension(135, 23));
        btnAddQueries.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddQueriesActionPerformed(evt);
            }
        });

        btnRemove.setText("Remove test set");
        btnRemove.setEnabled(false);
        btnRemove.setMaximumSize(new java.awt.Dimension(135, 23));
        btnRemove.setMinimumSize(new java.awt.Dimension(135, 23));
        btnRemove.setPreferredSize(new java.awt.Dimension(135, 23));
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });

        btnNext.setText("Continue >>");
        btnNext.setEnabled(false);
        btnNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextActionPerformed(evt);
            }
        });

        btnSaveSet.setText("Save current test profile");
        btnSaveSet.setEnabled(false);
        btnSaveSet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveSetActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 310, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnLoadSet, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnRemove, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnAddQueries, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addComponent(btnNext, javax.swing.GroupLayout.Alignment.TRAILING))
                    .addComponent(btnSaveSet, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnAddQueries, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnRemove, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnLoadSet)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSaveSet)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnNext))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private class TableListener implements ListSelectionListener {
        @Override
        public void valueChanged(ListSelectionEvent e) {
            if (e.getValueIsAdjusting() == false && tblTestSets.getSelectedRow() > -1) {
                btnRemove.setEnabled(true);            
            } else {
                btnRemove.setEnabled(false);
            }
        }
    }
    
    private void btnAddQueriesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddQueriesActionPerformed
        //Create a file chooser
        final JFileChooser fc = new JFileChooser();
        fc.setDialogTitle("Select a TestSet file to add");
        FileNameExtensionFilter xmlfilter = new FileNameExtensionFilter("TestSet files (*.xml)", "xml");
        fc.setFileFilter(xmlfilter);
        fc.setMultiSelectionEnabled(true);
            
        int returnVal = fc.showOpenDialog(this);
        
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File[] files = fc.getSelectedFiles();
            
            for(File file : files) {
                addTestSet(file);
            }
        }
    }//GEN-LAST:event_btnAddQueriesActionPerformed

    private void btnSaveSetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveSetActionPerformed
        // use factory to get an instance of document builder
        //DocumentBuilder db = dbf.newDocumentBuilder();
        // create instance of DOM
        //dom = db.newDocument();
        
        final JFileChooser fc = new JFileChooser();
        fc.setDialogTitle("Save your current Test Profile");
        FileNameExtensionFilter xmlfilter = new FileNameExtensionFilter("TestProfile files (*.xml)", "xml");
        fc.setFileFilter(xmlfilter);
        fc.setMultiSelectionEnabled(false);
            
        int returnVal = fc.showSaveDialog(this);
        
        if (returnVal == JFileChooser.APPROVE_OPTION) {
             try {
                File file = fc.getSelectedFile();
                
                // TODO: use a util lib for this
                String extension = "";
                int i = file.getName().lastIndexOf('.');
                if (i >= 0) {
                    extension = file.getName().substring(i+1);
                }
                
                // if file does not have .xml extension create new file with .xml extension
                if (extension.equals("xml") == false) {
                    file = new File(file.getAbsolutePath() + ".xml");
                }
                
                DocumentBuilder db = dbf.newDocumentBuilder();
                Document dom = db.newDocument();
                 
                 // create the root element
                Element rootEl = dom.createElement("testprofile");
                
                // add queryset file paths to root element
                Element e = null;
                for(TestSet testSet : testSetList) {
                    e = dom.createElement("testset");
                    e.appendChild(dom.createTextNode(testSet.getFilename()));
                    rootEl.appendChild(e);
                }
                
                dom.appendChild(rootEl);
                
                Transformer tr = TransformerFactory.newInstance().newTransformer();
                tr.setOutputProperty(OutputKeys.INDENT, "yes");
                tr.setOutputProperty(OutputKeys.METHOD, "xml");
                tr.setOutputProperty(OutputKeys.ENCODING, "UTF-8");
                tr.setOutputProperty("{http://xml.apache.org/xslt}indent-amount", "4");

                // send DOM to file
                tr.transform(new DOMSource(dom), new StreamResult(file));
                
                // show success message
                JOptionPane.showMessageDialog(this, "Current Test Profile has been saved to " + file.getAbsolutePath(), "Saved",
                    JOptionPane.INFORMATION_MESSAGE);
             } catch (Exception e) {
                 JOptionPane.showMessageDialog(this, "Unable to save current Test Profile: " + e.getMessage(), "Error during saving",
                    JOptionPane.ERROR_MESSAGE);
             }
        }
    }//GEN-LAST:event_btnSaveSetActionPerformed

    private void btnLoadSetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoadSetActionPerformed
        //Create a file chooser
        final JFileChooser fc = new JFileChooser();
        fc.setDialogTitle("Select a TestProfile file to load");
        FileNameExtensionFilter xmlfilter = new FileNameExtensionFilter("TestProfile files (*.xml)", "xml");
        fc.setFileFilter(xmlfilter);
        fc.setMultiSelectionEnabled(false);
            
        int returnVal = fc.showOpenDialog(this);
        
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();

            if (testSetList.size() > 0) {            
                int dialogResult = JOptionPane.showConfirmDialog (this, "Are you sure you want to load the TestProfile '" + file.getName() + "? "
                        + "Your current TestProfile will be lost", "Loading", JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);
                if(dialogResult == JOptionPane.CANCEL_OPTION){
                    return;
                }
            }
              
            try {
                DocumentBuilder db = dbf.newDocumentBuilder();
                Document dom = db.parse(new InputSource(file.getAbsolutePath()));
                
                Element doc = dom.getDocumentElement();
                NodeList list = doc.getElementsByTagName("testset");
                
                if (list.getLength() < 1) {
                    throw new Exception("TestProfile file is empty");
                }
                
                // clear current querysets
                testSetList.clear();
                
                // load querysets
                for(int i=0; i < list.getLength(); i++) {
                    Node node = list.item(i);
                    addTestSet(new File(node.getTextContent()));
                }      
                
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Unable to load " + file.getName() + ": " + e.getMessage(), "Invalid TestProfile file",
                JOptionPane.ERROR_MESSAGE);
                return;
            }
        }
    }//GEN-LAST:event_btnLoadSetActionPerformed

    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed
        int selected = tblTestSets.getSelectedRow();
        if (selected == -1 || selected > testSetList.size()) {
            btnRemove.setEnabled(false);
            return;
        }
        
        // remove from list...
        testSetList.remove(selected);
        
        // ... and update table
        updateTable();
    }//GEN-LAST:event_btnRemoveActionPerformed

    private void btnNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextActionPerformed
        if (testSetList.size() == 0) {
            btnNext.setEnabled(false);
            return;
        }
        
        testRunner.setTestSetList(testSetList);
        
        SetupTestScreen setupScreen = new SetupTestScreen(testRunner);
        setupScreen.setVisible(true);
        
        this.dispose();
    }//GEN-LAST:event_btnNextActionPerformed

    private void addTestSet(File file) {
        TestSet testSet = new TestSet();
        
        try {
            testSet.loadFile(file.getAbsolutePath());
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Unable to add " + file.getName() + ": " + e.getMessage(), "Invalid TestSet file",
                JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        Iterator<TestSet> iter = testSetList.iterator();
        String currSource = null;
        while(iter.hasNext()) {
            TestSet curr = iter.next();
            
            if (currSource == null) {
                currSource = curr.getSource();
            }
            
            // verify that file hasn't already been added
            if (curr.getFilename().equals(testSet.getFilename())) {
                JOptionPane.showMessageDialog(this, "Unable to add " + file.getName() + " because it has already been added", "Already added",
                    JOptionPane.ERROR_MESSAGE);
                return;
            }            
            
            // verify current dataset source
            if (curr.getSource().equals(testSet.getSource()) == false) {
                JOptionPane.showMessageDialog(this, "Unable to add " + file.getName() + ": data source must be the same as other testset files", "Unexpected data source",
                    JOptionPane.ERROR_MESSAGE);
                return;
            }            
        }
        
        // add to queue
        testSetList.add(testSet);
        Collections.sort(testSetList, new TestSetComparator());
        
        // update table
        updateTable();        
    }
    
    private void updateTable () {
        DefaultTableModel dm = (DefaultTableModel) tblTestSets.getModel();
        dm.setRowCount(0);
        
        NumberFormat formatter = NumberFormat.getInstance(new Locale("en_US"));
        
        Iterator<TestSet> iter = testSetList.iterator();
        while(iter.hasNext()) {
            TestSet testSet = iter.next();
            dm.addRow(new Object[]{
                testSet.getSource(),
                testSet.getName(),
                formatter.format(testSet.getSize())
            });
        }
        
        if (testSetList.size() > 0) {
            btnSaveSet.setEnabled(true);
            btnNext.setEnabled(true);
        } else {
            btnSaveSet.setEnabled(false);
            btnNext.setEnabled(false);
        }
    }
    
    private class TestSetComparator implements Comparator<TestSet> {

        @Override
        public int compare(TestSet o1, TestSet o2) {
            if (o1.getSize() > o2.getSize()) return 1;
            if (o1.getSize() < o2.getSize()) return -1;
            return 0;
        }
        
    }
   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddQueries;
    private javax.swing.JButton btnLoadSet;
    private javax.swing.JButton btnNext;
    private javax.swing.JButton btnRemove;
    private javax.swing.JButton btnSaveSet;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblTestSets;
    // End of variables declaration//GEN-END:variables
}
